syntax = "proto3";

package kubetee;

option java_package = "com.alipay.kubetee.ual.proto.v1";

////////////////////////////////////////////////////////////////
/// Unified Attestation Messages
////////////////////////////////////////////////////////////////

/// Special Parameters for different TEE platforms
message UnifiedAttestationReportParams {
  // The identity string for report instance which is cached inside TEE.
  // It's optional and usually used in Asynchronous processes.
  string str_report_identity = 1 [json_name = "str_report_identity"];
  // The user data in some TEE platforms, Max to 64 Bytes of HEX string.
  // Users need to convert binary value data to HEX string themselves.
  string hex_user_data = 2 [json_name = "hex_user_data"];
  // The JSON serialized string of UnifiedAttestationNestedReports
  string json_nested_reports = 3 [json_name = "json_nested_reports"];
  // Service Provider ID for SGX1 only
  string hex_spid = 10 [json_name = "hex_spid"];
}

/// Unified Attestation Report
message UnifiedAttestationReport {
  // For compatibility and udpate later, current is version "1.0"
  string str_report_version = 1 [json_name = "str_report_version"];
  // Valid type string: "BackgroundCheck"|"Passport"|"Uas"
  string str_report_type = 2 [json_name = "str_report_type"];
  // The TEE platform name
  string str_tee_platform = 3 [json_name = "str_tee_platform"];
  // Different JSON serialized string for each TEE platform
  // The TEE platforms are in charge of parsing it in their own way.
  string json_report = 4 [json_name = "json_report"];
  // The JSON serialized string of UnifiedAttestationNestedReports
  string json_nested_reports = 9 [json_name = "json_nested_reports"];
}

/// The nested attester's report verified by main attester locally
/// So, it only has UnifiedAttestationAttributes as final result.
/// This means we must trust the main attester firstly.
message UnifiedAttestationNestedReports {
  // The JSON serialized string of UnifiedAttestationNestedResults
  string json_nested_results = 1 [json_name = "json_nested_results"];
  // The signature of json_nested_results
  string b64_nested_signature = 2 [json_name = "b64_nested_signature"];
}

/// The list of nested attester's attestation results 
message UnifiedAttestationNestedResults {
  repeated UnifiedAttestationAttributes results = 1 [json_name = "results"];
}

/// Unified attestation report with public key authentication
message UnifiedAttestationAuthReport {
  UnifiedAttestationReport report = 1 [json_name = "report"];
  string pem_public_key = 2 [json_name = "pem_public_key"];
}

/// Collect all submodule attesters's authentication reports for
/// main attester local verification together.
message UnifiedAttestationAuthReports {
  // JSON serialized string of UnifiedAttestationAuthReport 
  repeated string reports = 1 [json_name = "reports"];
}

/// UnifiedAttestationAttributes collect all attributes information
/// of trusted application from UnifiedAttestationReport format report.
/// All attributes is optional when used in UnifiedAttestationPolicy. 
/// The TEE implement decides which attribute is used in repport and policy.
message UnifiedAttestationAttributes {
  // The TEE platform, in case some verifier need to verify this.
  string str_tee_platform = 1 [json_name = "str_tee_platform"];
  // The TEE platform hardware related identity or version
  string hex_platform_hw_version = 2 [json_name = "hex_platform_hw_version"];
  // The TEE platform TCB software related version
  string hex_platform_sw_version = 3 [json_name = "hex_platform_sw_version"];
  // The TEE platform security related attribte or flags
  string hex_secure_flags = 4 [json_name = "hex_secure_flags"];
  // The measurement of TEE implement internal stuffs
  string hex_platform_measurement = 5 [json_name = "hex_platform_measurement"];
  // The measurement of TEE instance boot time stuffs
  string hex_boot_measurement = 6 [json_name = "hex_boot_measurement"];
  // The TEE instance or trust application identity when generate the reprot
  string str_tee_identity = 9 [json_name = "str_tee_identity"];
  // The static measurement of trust application when load the code
  string hex_ta_measurement = 10 [json_name = "hex_ta_measurement"];
  // The dynamical measurement of trust application code,
  // for example, the real-time measurement of code in secure memory
  // after the trust application is already run.
  string hex_ta_dyn_measurement = 11 [json_name = "hex_ta_dyn_measurement"];
  // The measurement or other identity of the trust application signer
  string hex_signer = 12 [json_name = "hex_signer"];
  // The product ID of the TEE instance or trust application
  string hex_prod_id = 13 [json_name = "hex_prod_id"];
  // The minimal ISV SVN of the TEE instance or trust application
  string str_min_isvsvn = 14 [json_name = "str_min_isvsvn"];
  // The bool string "0" for debugable, "1" for not debugable
  string bool_debug_disabled = 15 [json_name = "bool_debug_disabled"];
  // The user special data for generating attestation report
  string hex_user_data = 20 [json_name = "hex_user_data"];
  // hex string hash or original pem public key
  string hex_hash_or_pem_pubkey = 21 [json_name = "hex_hash_or_pem_pubkey"];
  // The idenpendent freshness value beside what in user data
  string hex_nonce = 22 [json_name = "hex_nonce"];
  // The service provider id, e.g. use in sgx1, 64 bytes hex string
  string hex_spid = 30 [json_name = "hex_spid"];
}

/// UnifiedAttestationPolicy is used when verify the attestation report.
/// Both main or nested submodule attester support multi-version of instances.
message UnifiedAttestationPolicy {
  // Assume one public key is bound to one report, specify it here.
  // We can also specify the public key or its hash in main or submodule
  // UnifiedAttestationAttributes. Public key verification will happen
  // in both two places.
  // NOTE: if there is submodule attester, we must specify the public key
  // here to verify the signature of submode attestation result.
  string pem_public_key = 1 [json_name = "pem_public_key"];
  // For main attester
  repeated UnifiedAttestationAttributes main_attributes = 2 [json_name = "main_attributes"];
  // For submodule attesters
  repeated UnifiedAttestationNestedPolicy nested_policies = 3 [json_name = "nested_policies"];
}

/// Match rulse for nested report verification
message UnifiedAttestationNestedPolicy {
  repeated UnifiedAttestationAttributes sub_attributes = 1 [json_name = "sub_attributes"];
}

/// UnifiedAttestationReport::json_report for SGX1 EPID BackgroundCheck type
/// Only quote is sent to verifer for attestation
message EpidReport {
  string b64_quote = 1 [json_name = "b64_quote"];
}

/// UnifiedAttestationReport::json_report for SGX1 EPID Passport type
/// send the IAS response data for SGX1 EPID attestation
message IasReport {
  // The signature is calculated over the entire body of IAS HTTP response.
  string b64_signature = 1 [json_name = "b64_signature"];
  string str_signing_cert = 2 [json_name = "str_signing_cert"];
  string str_advisory_url = 3 [json_name = "str_advisory_url"];
  string str_advisory_ids = 4 [json_name = "str_advisory_ids"];
  // The entire body of IAS HTTP response in JSON format
  string json_response_body = 5 [json_name = "json_response_body"];
}

/// UnifiedAttestationReport::json_report for SGX2 DCAP
/// Store the quote and PCCS verfication collaretal for SGX2 DCAP attestation
message DcapReport {
  // For BackgroundCheck type report: Only quote in report
  string b64_quote = 1 [json_name = "b64_quote"];
  // For Passport type report: Quote and collateral in report
  // The serailized JSON string of the SgxQlQveCollateral
  string json_collateral = 2 [json_name = "json_collateral"];
}

/// SGX DCAP quote verification collateral
/// Get this after generate the quote and add it into report
/// In this way, the challenger will don't need to connect PCCS any more.
message SgxQlQveCollateral {
  // uint32_t, version = 1. PCK Cert chain is in the Quote.
  int64 version = 1 [json_name = "version"];
  string pck_crl_issuer_chain = 2 [json_name = "pck_crl_issuer_chain"];
  string root_ca_crl = 3 [json_name = "root_ca_crl"];
  string pck_crl = 4 [json_name = "pck_crl"];
  string tcb_info_issuer_chain = 5 [json_name = "tcb_info_issuer_chain"];
  string tcb_info = 6 [json_name = "tcb_info"];
  string qe_identity_issuer_chain = 7 [json_name = "qe_identity_issuer_chain"];
  string qe_identity = 8 [json_name = "qe_identity"];
}

/// UnifiedAttestationReport::json_report for HyperEnclave
/// Only quote is required for HyperEnclave attestation
message HyperEnclaveReport {
  string b64_quote = 1 [json_name = "b64_quote"];
}

/// UnifiedAttestationReport::json_report for Huawei Kunpeng
message KunpengReport {
  string b64_quote = 1 [json_name = "b64_quote"];
  int64 int64_version = 2 [json_name = "int64_version"];
}

/// UnifiedAttestationReport::json_report for Hygon CSV
message HygonCsvReport {
  // For BackgroundCheck type report: Only quote in report
  string b64_quote = 1 [json_name = "b64_quote"];
  // For Passport type report: Quote and collateral in report
  // The serailized JSON string of the HygonCsvCertChain
  string json_cert_chain = 2 [json_name = "json_cert_chain"];
  // Save chip id to avoid to parse it from b64_quote when verify report
  string str_chip_id = 3 [json_name = "str_chip_id"];
}

/// Hygon CSV report verification collateral about certificates
/// Get this after generate the quote and add it into report
/// In this way, the challenger will don't need to connect PCCS any more.
message HygonCsvCertChain {
  // The Base64 string of hygon_root_cert_t
  string b64_hsk_cert = 1 [json_name = "b64_hsk_cert"];
  // The Base64 string of csv_cert_t
  string b64_cek_cert = 2 [json_name = "b64_cek_cert"];
}

/// UnifiedAttestationReport::json_report for UAS
/// Return the JSON serialized 
message UasReport {
  // The JSON serialized string of UasAttestionResult
  string json_result = 1 [json_name = "json_result"];
  // the signature of json_result
  string b64_signature = 2 [json_name = "b64_signature"];
}

message UasAttestionResult {
  int64 int64_result_code = 1 [json_name = "int64_result_code"];
  string str_tee_platform = 2 [json_name = "str_tee_platform"];
  string hex_nonce = 3 [json_name = "hex_nonce"];
  string b64_quote = 4 [json_name = "b64_quote"];
}
